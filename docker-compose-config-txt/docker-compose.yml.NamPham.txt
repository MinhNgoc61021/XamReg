version: '3'
# cmd: docker-compose build & docker-compose up (build & run docker)
services:
  db:
    image: mysql:5.7
    volumes:
      - ./db:/docker-entrypoint-initdb.d
    restart: always
    environment:
      - MYSQL_USER=root
      - MYSQL_PASSWORD=baloney1
      - MYSQL_ROOT_PASSWORD=baloney1
      - MYSQL_DATABASE=xamreg
  phpmyadmin:
      image: phpmyadmin/phpmyadmin
      restart: always
      depends_on:
        - db
      environment:
        - PMA_HOST=db
        - MYSQL_ROOT_PASSWORD=root
      ports:
        - 8070:80
  api:
      image: xamreg/flask/api
      build: ./api # setting build to ./api because our Dockerfile is inside the api folder.
      container_name: api
      command: python run.py
      volumes:
        - ./:/run
      depends_on:
        - db
      ports:
        - "5000:5000"
#      expose:
#        - 9000 # port 9000 is used to run inside the container(api folder), but on host machine (outside the container) it runs on port 8000
  client:
      image: xamreg/client/vue
      build: ./client
      container_name: client
      command: npm run dev
      ports:
        - "8080:8080"
      environment:
        - CHOKIDAR_USEPOLLING=true

#  nginx:
#      build: ./nginx
#      container_name: nginx
#      restart: always
#      ports:
#      - "8000:8000"
#      - "8001:80"
#      # When accessing to port localhost:8000 from the PC, it will actually route the requests to port 8000 in the container,
#      # as requests to port 8000 are routed to port 9000 where Flask api runs.
#
#      # This means that, when we visit localhost:8001 on the PC, it will be routed to localhost within the container where our UI app runs.
#  grafana:
#    image: grafana/grafana
#    restart: always
#    ports:
#      - "9878:3000"
#    environment:
#      - GF_SERVER_ROOT_URL=http://grafana.server.name
#      - GF_SECURITY_ADMIN_PASSWORD=secret
